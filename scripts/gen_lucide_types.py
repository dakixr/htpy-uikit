from __future__ import annotations

import argparse
import json
import urllib.request
from pathlib import Path

DEFAULT_VERSION = "latest"
DEFAULT_URL_TEMPLATE = "https://unpkg.com/lucide-static@{version}/icon-nodes.json"


def fetch_icon_names(version: str) -> list[str]:
    url = DEFAULT_URL_TEMPLATE.format(version=version)
    with urllib.request.urlopen(url) as resp:  # nosec - fetching well-known public JSON
        data = json.load(resp)
    if not isinstance(data, dict):
        raise RuntimeError("Unexpected icon-nodes.json structure: expected object")
    names = sorted(map(str, data.keys()))
    if not names:
        raise RuntimeError("No icon names found in lucide-static icon-nodes.json")
    return names


def format_literal(names: list[str]) -> str:
    # Build a Literal with one name per line for readability
    inner = ",\n    ".join(repr(n) for n in names)
    return f"Literal[\n    {inner}\n]"


def generate_types_py(names: list[str], version: str) -> str:
    literal_expr = format_literal(names)
    lines = [
        "# This file is GENERATED by scripts/gen_lucide_types.py",
        f"# Source: lucide-static@{version}",
        "# Do not edit manually.",
        "from typing import Literal",
        "",
        f"LucideName = {literal_expr}",
        "",
        '__all__ = ["LucideName"]',
        "",
    ]
    return "\n".join(lines)


def write_if_changed(path: Path, content: str) -> bool:
    path.parent.mkdir(parents=True, exist_ok=True)
    old = path.read_text(encoding="utf-8") if path.exists() else None
    if old == content:
        return False
    path.write_text(content, encoding="utf-8")
    return True


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(description="Generate Lucide icon Literal types")
    parser.add_argument(
        "--version",
        default=DEFAULT_VERSION,
        help="lucide-static version/tag to fetch (default: latest)",
    )
    parser.add_argument(
        "--dest",
        type=Path,
        default=Path("src/htpy_uikit/components/_types_lucide.py").resolve(),
        help="Destination path for generated types file",
    )
    args = parser.parse_args(argv)

    names = fetch_icon_names(args.version)
    content = generate_types_py(names, version=args.version)
    changed = write_if_changed(args.dest, content)
    out = "updated" if changed else "up-to-date"
    print(f"Wrote {args.dest} ({out}) with {len(names)} icons from lucide-static@{args.version}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
